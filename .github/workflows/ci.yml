name: CI

on:
  push:
  pull_request:

jobs:
  cargo_test:
    strategy:
      # Prevent GitHub from canceling all in-progress jobs when a matrix job fails.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable
          profile: minimal
      # Smart caching for Rust projects.
      # Includes workaround for macos cache corruption.
      # - https://github.com/rust-lang/cargo/issues/8603
      # - https://github.com/actions/cache/issues/403
      - uses: Swatinem/rust-cache@v1

      - name: Build
        run: cargo build
      - name: Test kube_runtime
        run: cargo test -p kube-runtime
      - name: Test kube
        run: cargo test -p kube
      - name: Test kube_derive
        run: cargo test -p kube-derive
      # REVIEW This runs tests again
      - name: Test all
        run: cargo test --lib --all -j4
      - name: Test docs
        run: cargo test --doc --all -j4

      # kube features
      - name: Test kube with features native-tls,ws,oauth
        run: cargo test --manifest-path kube/Cargo.toml --lib --no-default-features --features=native-tls,ws,oauth
      - name: Test kube with features rustls-tls,ws,oauth
        run: cargo test --manifest-path kube/Cargo.toml --lib --no-default-features --features=rustls-tls,ws,oauth

      # examples
      - name: Test examples
        run: cargo test -p examples -j4
      - name: Build examples
        run: cargo build --manifest-path examples/Cargo.toml
      - name: Test crd_derive_no_schema example
        run: cargo test --manifest-path examples/Cargo.toml --example crd_derive_no_schema --no-default-features --features=native-tls

  integration:
    # TODO Compile static binary once
    # TODO Test macos and win
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # NOTE caching is probably not as effective because clux/muslrust uses nightly.
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: musl-cargo-${{ hashFiles('**/Cargo.toml') }}

      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.20
          # k3d-kube
          k3d-name: kube
          # Used to avoid rate limits when fetching the releases from k3s repo.
          # Anonymous access is limited to 60 requests / hour / worker
          # github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile dapp
        run: |
          docker run --rm -t \
              --mount type=bind,source=${{ github.workspace }},target=/volume \
              --mount type=bind,source=$HOME/.cargo,target=/root/.cargo \
              clux/muslrust:latest \
              cargo build -p tests --release
          cp target/release/dapp tests/

      - name: Build image
        run: "docker build -t clux/kube-dapp:${{ github.sha }} tests/"
      - name: Import image
        run: "k3d image import clux/kube-dapp:${{ github.sha }} --cluster kube"
      - run: sed -i 's/latest/${{ github.sha }}/g' tests/deployment.yaml

      - name: Create resource
        run: kubectl apply -f tests/deployment.yaml -n apps
      # - name: Show rollout status
      #   run: kubectl rollout status deployment/dapp -n apps --watch=true --timeout=5m
      - run: kubectl get all -n apps
      - name: Describe resource
        run: kubectl describe deployment/dapp -n apps

      - run: kubectl get all -n apps
      - run: kubectl describe deploy dapp -n apps
      - run: kubectl wait --for=condition=Completed deploy/dapp -n apps --timeout=60s || kubectl logs -f deploy/dapp -p -n apps
      - run: kubectl get all -n apps
